
#include <stdio.h>
#include<stdlib.h>
struct Node{
      int data;
      struct Node *addr;
  }*next,*newnode,*start,*curr;
void create(int);
void delete();
void display();
void insert(int);


int main()
{
    int n,data,pos,ch;
      do{
    printf("Enter your choise\n1.Create 2.Display 3.DeleteAtBegining 4.Insert");
    scanf("%d",&ch);
  
    switch(ch)
    {
        
        case 1:
        printf("\nEnter the element into linked list");
        scanf("%d",&n);
        create(n);
        printf("\nelement insert");
         break;
        
        while(ch==1);
        case 2:
       //printf("Enter the position to delete element");
        //scanf("%d",&pos);
        display();
        break;
        case 3:
        delete();
        printf("\nDeleted Successfully");
         display();
        break;
        case 4:
        printf("\nEnter element to be insert");
        scanf("%d",&n);
        insert(n);
        printf("\nElement is inserted");
        display();
        break;
    }
    printf("\ngo to main menu press 1");
    scanf("%d",&ch);
    }while(ch==1);
  
    return 0;
}
  void create(int n)
    {
       // struct Node *newnode;
        newnode=malloc(sizeof(struct Node));
        newnode->data=n;
        newnode->addr=NULL;
        if(start==NULL)
        {
            start=newnode;
        }
        else
        {
           curr=start;
           while(curr->addr!=NULL)
           {
            curr=curr->addr;
           }
            curr->addr=newnode;  
        }
    }
    void display()
    {
        if(start==NULL)
        {
            printf("\nLinked list is empty");
        }
        else
        {
            curr=start;
            while(curr!=NULL)
            {
                printf("| %d | %u ",curr->data,curr->addr);
                curr=curr->addr;
            }
        }
    }
    void delete()
    {
        if(start==NULL)
        {
            printf("\nLinked list is empty");
        }
        else
        {
            curr=start;
            start=start->addr;
            free(curr);
        }
    }
    void insert(int n)
    {
        newnode=malloc(sizeof(struct Node));
        newnode->data=n;
        newnode->addr=start;
        start=newnode;
    }
  
